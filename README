Python package for rapid generation of accretion and light curve templates for eccentric binaries


Modules
-------
- accretion : generate periodic templates of accretion onto the 'primary', 'secondary', or 'total'


Users can accomplish this in two separate ways:

1. Generate an instance of an 'AccretionSeries' object and access the data via the associated 'time', 'primary', 'secondary', and 'total' attributes
	
	AccretionSeries(eccentricity:float, n_modes:int=20, n_orbits:int=10, retrograde:bool=False)

	Parameters :
		eccentricity : desired binary eccentricity for accretion series (max 0.8 prograde / 0.7 retrograde)
		n_modes  : number of modes to be used in constructing the series (max 29)
		n_orbits : number of periods to generate
		retrograde : whether the binary should be regarded as retrograde to the CBD (otherwise prograde assumed)

	Attributes :
		time      : values of the time associated with generated accretion series (in orbits)
		primary   : periodic accretion series for the primary component (in units of viscous feeding rate)
		secondary : periodic accretion series for the secondary component (in units of viscous feeding rate)
		total     : total accretion rate series onto the binary (in units of viscous feeding rate)

	e.g.
		ts = AccretionSeries(0.3, n_orbits=5, n_modes=29)
		orbits = ts.time
		mdot_primary = ts.primary
		mdot_secondary = ts.secondary
		mdot_total = ts.total

2. Directly call the functions 'primary', 'secondary', 'total', 'orbits' with the same signature as AccretionSeries objects.
   (Will generate an AccretionSeries as an intermediary)

   e.g.
   		orbits = orbits(0.5, n_orbits=5, n_modes=29, retrograde=True)
		mdot_primary = primary(0.5, n_orbits=5, n_modes=29, retrograde=True)
		mdot_secondary = secondary(0.5, n_orbits=5, n_modes=29, retrograde=True)
		mdot_total = total(0.5, n_orbits=5, n_modes=29, retrograde=True)

